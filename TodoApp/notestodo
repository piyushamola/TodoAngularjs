1.constants are angular entity that are used to consume non-angular entities.
2. values same like constants used but they can change their values


3.lesser the entries in the view model better the performance because every entry is doing the continuous lookup

4.Apply happens when the user writes something

5. property and event binding. event binding from  child to parent event binding data flow through user interactions. propertybinding from  parent to child . 

6. template features refer to the elements which a view knows about and the view model is not even exposed to it.

7. everytime we click a checkbox the method is running to show the incomplete count

8.  
              $scope.incompleteCount=function(){ // dependent and everything inside it is the dependency
                        var count=0;
                        angular.forEach($scope.todo.items,function(item){ 
                                      if(!item.done){
                                      	count++;
                                      }
                        });
                        return count;
              }

              i. ng-repeat is the two way databinding. property as well as event binding
              ii. check box check updated the value at $scope
              iii. incompleteCount was doing the watch  as $scope.incompleteCount.  and $scope is for watch
              iv. so continuously watching the check box and re running on check and unchecked. The function scope is the dependent.

9. EASCM (Element Attribute Class Comment)

10. <button class="btn btn-default" ng-click="addNewItem(actionText)">Add</button>
           actionText is the watch
           addNewItem() apply triggered only with events

11. <input class="form-control" ng-model="actionText"/> // digest the actionText
     views can do the watch and apply both.

12. filters are often added at the module level and should not be depend on view models.


dpd -- help
dpd create testproject
dpd -p 5700 sportsstore\app.dpd

localhost:port/dashboard




PROJECT SHOPPING CART

There will be 3 composite views

1. Products one composite view
2. checkout showing your cart
3. Place order now , form where user adds all the information












<!DOCTYPE html>
<html ng-app="todoApp">
<head>
	 <title> TO DO List</title>
	 <link href="angular/bootstrap.css" rel="stylesheet"/>
	 <link href="angular/bootstrap-theme.css" rel="stylesheet"/>
	 <script src="angular/angular.js"></script>
	 <script>
	 	var model ={
	 		user:"Adam",
	 		// items:[
	 		// 	{action:"Buy Flowers",done:false},
	 		// 	{action:"Get Shoes",done:false},
	 		// 	{action:"Collect Tickets",done:true},
	 		// 	{action:"Call Joe",done:false}


	 		// ]
	 	};
	 
	 // c1 is the constant which is used to consume non-angular entity
	 	 // constant reutrn to the static while value can change so constant is lighter than values.
	 	 var todoApp=angular.module("todoApp",[]); //[] helper module

	 	 todoApp.run(function($http){
	 	 	$http.get("todo.json").success(function(data){
	 	 		model.items=data;
	 	 	})
	 	 })

	 	 todoApp.filter("checkedItems",function(){ //factory function- Data In and Data Out function(todo.items)
	 	 	return function(items,showComplete){   //worker function // app logic
	 	 		var resultArr=[]; 
	 	 		angular.forEach(items,function(item){
	 	 			if(item.done==false || showComplete==true){ //uncheked by default false;
	 	 				resultArr.push(item);
	 	 			}
	 	 		});
	 	 		return resultArr;
	 	 	}
	 	 });
	             	
	 	todoApp.controller("ToDoCtrl",function($scope){
	 	//$watch
	 	//$digest
	 	//dependent dependency
                  $scope.todo=model;   // $scope.todo is the dependent and model is the dependency
     //              $scope.todo:{
     //              		{action:"Buy Flowers",done:false},
	 			// {action:"Get Shoes",done:false},
	 			// {action:"Collect Tickets",done:true},
	 			// {action:"Call Joe",done:false}

     //              }
                          
              $scope.incompleteCount=function(){
                        var count=0;
                        angular.forEach($scope.todo.items,function(item){
                                      if(!item.done){
                                      	count++;
                                      }
                        });
                        return count;
              }

              $scope.warningLevel=function(){
              	return $scope.incompleteCount()<3? "label-success":"label-warning";
              }
              $scope.addNewItem=function(actionText){
              	$scope.todo.items.push({action:actionText,done:false});
              }

	 	});
	 </script>
	</head>
	<body ng-controller="ToDoCtrl">
		<div class="page-header">
			<h1>
				{{todo.user}}'s To Do List
				 <!-- span tank hides when incompleteCount becomes zero -->
				<span class="label label-default" ng-hide="incompleteCount()==0" ng-class="warningLevel()">{{incompleteCount()}}</span>
			</h1>
		</div>
		<div class="panel">
			<div class="input-group">
				<input class="form-control" ng-model="actionText"/>
				<span class="input-group-btn">
					<button class="btn btn-default" ng-click="addNewItem(actionText)">Add</button>
				</span>
			</div>
			<table class="table table-stripped">
				<thead>
					<tr>
						<th>Description</th>
						<th>DOne</th>

					</tr>
				</thead>
				<tbody>                                      <!-- check items do the watch for show complete -->
					<tr ng-repeat="item in todo.items | checkedItems:showComplete | orderBy:'action'"> <!-- //ng-repeat is the view  ng-repeat has a watch so every change in todo.items is rerunning in the ng-repeat-->
						<td>{{item.action}}</td>
						<td><input type="checkbox" ng-model="item.done"/></td> 
						<td>{{item.done}}</td>
					</tr>
				</tbody>
			</table>
			<div class="checkbox-inline">
				<label><input type="checkbox" ng-model="showComplete">Show Complete</label>
			</div>
		</div>
	</body>
	</html>

